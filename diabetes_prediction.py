# -*- coding: utf-8 -*-
"""diabetes_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yod-gLwCTDF0cTXg7odljmZZQKnB45Tf
"""

##IMPORTING LIBRARIES
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
##LOAD THE DATASET
df = pd.read_csv("/content/diabetes.csv")
print(df)
## EDA
#1.head of the dataset
print(df.head())
print(df.tail())
print(df.sample(10))
#2.the shape of the dataset
print(df.shape)
#3.list types of all columns
print(df.dtypes)
#4.info of the dataset
print(df.info())
#5.summary of the dataset
print(df.describe())
## DATA CLEANING
#1.drop the duplicates
print(df.shape)
df=df.drop_duplicates()
print(df.shape)
#2.check the NULL values
print(df.isnull().sum())
print(df.columns)
print('no.of zero values in glucose',df[df['Glucose']==0].shape[0])
print('no.of zero values in BloodPressure',df[df['BloodPressure']==0].shape[0])
print('no.of zero values inSkinThickness',df[df['SkinThickness']==0].shape[0])
print('no.of zero values in Insulin',df[df['Insulin']==0].shape[0])
# print('no.of zero values in BMI',df[df['BMI']==0].shape[0])

df['Glucose']=df['Glucose'].replace(0,df['Glucose'].mean())
print('no.of zero values in glucose',df[df['Glucose']==0].shape[0])
df['BloodPressure']=df['BloodPressure'].replace(0,df['BloodPressure'].mean())
df['SkinThickness']=df['SkinThickness'].replace(0,df['SkinThickness'].mean())
df['Insulin']=df['Insulin'].replace(0,df['Insulin'].mean())
df['BMI']=df['BMI'].replace(0,df['BMI'].mean())
print(df.describe())
##HISTOGRAMS
df.hist(bins=10,figsize=(10,10))
plt.show()
#splitting the dataset
x = df.iloc[:,0:8].values
y = df.iloc[:,8:9].values
print(x)
print(x.shape)
print(y)
print(y.shape)
#training/testing sets
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size =
0.2,random_state=7)
print(x_test)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)
#feature scalling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)
print(x_test)
# logistic regression
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(solver='lbfgs', max_iter=1000)

print(classifier.fit(x_train,y_train))
pred_y = classifier.predict(x_test)
print(pred_y)
# #classification matrics
from sklearn.metrics import accuracy_score
w = accuracy_score(y_test,pred_y)
print(w)
from sklearn.metrics import confusion_matrix
q = confusion_matrix(y_test,pred_y)
print(q)
#error evaluation
#1
#MAE-mean absolute error
#2
#MSE-mean squared error
m = pred_y - y_test
print(m)
n = np.abs(pred_y - y_test).mean()
print(n)
from sklearn import metrics
c = metrics.mean_absolute_error(y_test,pred_y)
print(c)
s = metrics.mean_squared_error(y_test,pred_y)
print(s)
#DATA VISUALISATION
plt.plot(x,y,color = 'g',marker = "*",markersize = 10)
plt.show()